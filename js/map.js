//map
var map;
//our markers holder
var markers = [];
//group our markers
var markerCluster;
//polygon
var polygon;



var scarborough = "43.815324,-79.341003|43.855196,-79.170372|43.816068,-79.152519|43.814086,-79.152175|43.813838,-79.151146|43.812352,-79.149429|43.812599,-79.148056|43.810865,-79.145996|43.810370,-79.142906|43.807644,-79.138099|43.808388,-79.136383|43.807892,-79.135353|43.806653,-79.133636|43.803184,-79.133979|43.800954,-79.135009|43.801698,-79.131576|43.801698,-79.130203|43.800459,-79.128143|43.799963,-79.124710|43.800247,-79.127644|43.798781,-79.123950|43.797493,-79.124326|43.797425,-79.121884|43.797524,-79.121575|43.795830,-79.120166|43.795491,-79.121105|43.794728,-79.120988|43.794983,-79.119345|43.794474,-79.117584|43.794390,-79.116058|43.791593,-79.119932|43.790746,-79.120519|43.782527,-79.126857|43.775238,-79.134604|43.768033,-79.142703|43.765151,-79.145990|43.759048,-79.152563|43.757809,-79.162289|43.754922,-79.172549|43.747744,-79.186591|43.740097,-79.196960|43.736508,-79.202360|43.733464,-79.208085|43.722068,-79.218130|43.721678,-79.219534|43.717050,-79.225311|43.713431,-79.227335|43.712431,-79.225311|43.711122,-79.224991|43.708658,-79.226057|43.707040,-79.225844|43.708581,-79.229785|43.710352,-79.230637|43.709736,-79.232768|43.708042,-79.233939|43.706732,-79.230957|43.705885,-79.231063|43.705886,-79.229514|43.706812,-79.228508|43.704630,-79.228508|43.705159,-79.231069|43.704763,-79.231801|43.705424,-79.233173|43.706349,-79.232350|43.706812,-79.232990|43.706548,-79.234087|43.706085,-79.233630|43.705490,-79.233721|43.705027,-79.234819|43.703705,-79.236099|43.702647,-79.236099|43.700994,-79.235642|43.702118,-79.237288|43.702052,-79.239118|43.702845,-79.238752|43.703242,-79.239758|43.702316,-79.242136|43.698217,-79.248721|43.694844,-79.255671|43.692133,-79.258964|43.686578,-79.263445|43.684462,-79.266463|43.673085,-79.276890|43.671762,-79.277621|43.672092,-79.278353|43.671232,-79.279816|43.674209,-79.280274|43.678310,-79.282011|43.678707,-79.283200|43.696299,-79.290242|43.716654,-79.299141|43.724252,-79.302572|43.757992,-79.315852|43.769341,-79.320389|43.792831,-79.331344|43.815513,-79.341304";
var north_york = "43.762668,-79.579806|43.763958,-79.577796|43.767508,-79.562829|43.770089,-79.549426|43.776057,-79.519269|43.787508,-79.469901|43.794442,-79.435500|43.811209,-79.364240|43.815561,-79.341232|43.772024,-79.321574|43.757505,-79.315319|43.715864,-79.298789|43.714733,-79.304150|43.717317,-79.303480|43.714895,-79.314426|43.705853,-79.330509|43.710212,-79.339445|43.712957,-79.339668|43.712796,-79.341679|43.715056,-79.344583|43.715056,-79.346816|43.716671,-79.349274|43.715541,-79.351954|43.720384,-79.364240|43.718285,-79.378537|43.725227,-79.379877|43.727487,-79.382111|43.728295,-79.386579|43.726842,-79.393951|43.732491,-79.396408|43.731200,-79.403779|43.749276,-79.408247|43.753794,-79.408247|43.747662,-79.415842|43.735881,-79.433266|43.707790,-79.427011|43.705368,-79.438627|43.711020,-79.442425|43.716025,-79.444212|43.713926,-79.454488|43.710697,-79.469231|43.698585,-79.467221|43.692771,-79.497824|43.696486,-79.506760|43.697939,-79.502292|43.709889,-79.505866|43.705853,-79.524184|43.707467,-79.535800|43.709728,-79.539597|43.711343,-79.539597|43.712634,-79.537587|43.714572,-79.537810|43.715056,-79.540714|43.716671,-79.541384|43.717963,-79.544288|43.723452,-79.540267|43.726196,-79.540937|43.727326,-79.538480|43.732169,-79.538704|43.729747,-79.540267|43.731362,-79.546745|43.734267,-79.549873|43.741207,-79.547639|43.743951,-79.549649|43.742821,-79.561042|43.746048,-79.568637|43.745564,-79.572435|43.747985,-79.573328|43.749276,-79.572211|43.752826,-79.583380|43.756860,-79.584944|43.762023,-79.577126|43.762507,-79.579806";
var etobicoke = "43.749833,-79.639209|43.750854,-79.637177|43.751173,-79.636029|43.751173,-79.633732|43.751364,-79.631612|43.751747,-79.630640|43.759021,-79.598573|43.759532,-79.595923|43.760297,-79.592831|43.760616,-79.590269|43.763615,-79.577549|43.762403,-79.579669|43.761892,-79.577372|43.756852,-79.585146|43.753023,-79.583467|43.749195,-79.572072|43.747727,-79.573485|43.745238,-79.572425|43.746323,-79.568450|43.742877,-79.560764|43.744026,-79.549633|43.741218,-79.547513|43.734260,-79.549810|43.732729,-79.548485|43.731707,-79.547160|43.729537,-79.540446|43.732346,-79.538856|43.727366,-79.538149|43.726026,-79.540711|43.723600,-79.540534|43.718046,-79.544245|43.716960,-79.541418|43.715236,-79.540534|43.714662,-79.537796|43.712874,-79.537796|43.711405,-79.539563|43.709745,-79.539563|43.707638,-79.535322|43.704572,-79.535676|43.704955,-79.531877|43.699527,-79.520923|43.697483,-79.519775|43.696589,-79.516595|43.697228,-79.512266|43.695248,-79.512443|43.692629,-79.513414|43.683941,-79.511383|43.682792,-79.508202|43.681705,-79.507054|43.680236,-79.506966|43.678958,-79.507319|43.675892,-79.509086|43.673847,-79.511824|43.670780,-79.513591|43.668032,-79.514386|43.666754,-79.514209|43.664582,-79.513238|43.663687,-79.512001|43.662728,-79.508732|43.662728,-79.505905|43.661642,-79.503697|43.659597,-79.500693|43.658063,-79.500605|43.656849,-79.501665|43.654740,-79.502549|43.653078,-79.501842|43.659469,-79.500782|43.658063,-79.500605|43.656785,-79.501754|43.654867,-79.502549|43.653078,-79.502019|43.651352,-79.500517|43.647453,-79.491948|43.644960,-79.491683|43.643106,-79.490711|43.641252,-79.486648|43.639015,-79.483379|43.637864,-79.478962|43.633580,-79.475517|43.630639,-79.472072|43.629552,-79.472513|43.628977,-79.474192|43.626994,-79.475340|43.623413,-79.476665|43.624373,-79.473927|43.623541,-79.472690|43.625332,-79.472072|43.625460,-79.470393|43.623861,-79.470040|43.622774,-79.469156|43.622454,-79.472425|43.620088,-79.474810|43.619001,-79.474192|43.618809,-79.475428|43.617850,-79.474810|43.617146,-79.475870|43.615100,-79.477284|43.614012,-79.476930|43.614204,-79.478520|43.613117,-79.479050|43.612285,-79.478785|43.612221,-79.479934|43.613437,-79.480640|43.613053,-79.482672|43.612094,-79.482937|43.613181,-79.484351|43.614972,-79.483467|43.614268,-79.482937|43.614204,-79.480552|43.615483,-79.480199|43.616251,-79.480729|43.617210,-79.479227|43.618169,-79.480552|43.617594,-79.481259|43.618105,-79.481877|43.618745,-79.481789|43.617850,-79.483821|43.617338,-79.485057|43.613565,-79.485852|43.608255,-79.487140|43.602085,-79.492537|43.601810,-79.496324|43.599685,-79.498028|43.598519,-79.497744|43.597696,-79.498312|43.597765,-79.499259|43.595159,-79.500395|43.594199,-79.503236|43.594268,-79.504845|43.593239,-79.505697|43.593445,-79.506455|43.594268,-79.506739|43.593719,-79.510621|43.592691,-79.509579|43.591868,-79.510715|43.591045,-79.510621|43.590359,-79.508538|43.587891,-79.510147|43.587273,-79.509011|43.586999,-79.510337|43.587136,-79.514692|43.588576,-79.517911|43.589331,-79.516585|43.590222,-79.516964|43.590154,-79.519805|43.588988,-79.528515|43.587822,-79.529746|43.588576,-79.531166|43.588028,-79.533533|43.587342,-79.534007|43.588028,-79.534385|43.588096,-79.536847|43.584873,-79.541108|43.581101,-79.543380|43.581650,-79.544137|43.585353,-79.544705|43.587068,-79.548303|43.588851,-79.546599|43.589948,-79.548019|43.590428,-79.549534|43.592348,-79.549629|43.593102,-79.548871|43.594337,-79.548587|43.595228,-79.549250|43.595639,-79.553605|43.596325,-79.554173|43.597765,-79.553605|43.598725,-79.553795|43.595982,-79.553889|43.598519,-79.553889|43.599136,-79.554552|43.599822,-79.555972|43.602565,-79.556446|43.603661,-79.558245|43.604964,-79.559570|43.605924,-79.561653|43.606952,-79.563357|43.607227,-79.564778|43.608255,-79.564967|43.608803,-79.566861|43.609695,-79.567429|43.610723,-79.567334|43.610997,-79.566103|43.613328,-79.564588|43.613396,-79.566576|43.614356,-79.568470|43.617166,-79.567902|43.617920,-79.566576|43.618743,-79.566955|43.621005,-79.566955|43.621416,-79.565630|43.622513,-79.566008|43.624020,-79.565819|43.624637,-79.565535|43.624637,-79.563831|43.626419,-79.563641|43.628133,-79.564209|43.627996,-79.567618|43.626693,-79.568186|43.626830,-79.570458|43.625939,-79.572920|43.625939,-79.573772|43.625323,-79.574435|43.625460,-79.575476|43.626830,-79.579737|43.627858,-79.581063|43.628612,-79.585418|43.629640,-79.586270|43.631491,-79.585228|43.633478,-79.585797|43.634437,-79.585607|43.635328,-79.586081|43.636219,-79.585512|43.637658,-79.585607|43.638480,-79.586365|43.641769,-79.588353|43.642591,-79.588542|43.644715,-79.592519|43.643208,-79.595643|43.643208,-79.598578|43.644099,-79.602081|43.644715,-79.603218|43.644373,-79.605111|43.644715,-79.606531|43.645195,-79.608046|43.645948,-79.608236|43.646496,-79.608709|43.664855,-79.588542|43.666156,-79.587785|43.666636,-79.589678|43.667183,-79.590436|43.674032,-79.594412|43.674854,-79.595170|43.685193,-79.600756|43.686152,-79.600756|43.689369,-79.602934|43.695531,-79.605963|43.725476,-79.623839|43.725545,-79.624502|43.728966,-79.626206|43.739843,-79.632550|43.741758,-79.634065|43.746752,-79.637000|43.748804,-79.638136|43.749829,-79.639272";
var west_toronto = "43.67793,-79.43956|43.69841,-79.43459|43.70401,-79.47882|43.6855,-79.51406|43.66826,-79.51624|43.63073,-79.47424|43.63048,-79.42068|43.66191,-79.44334";
var east_toronto = "43.71826,-79.38583|43.64778,-79.34967|43.64601,-79.32266|43.67433,-79.27288|43.72846,-79.30058|43.71827,-79.33376|43.72323,-79.37216";
var downtown_toronto = "43.665251,-79.411354|43.672577,-79.376593|43.671956,-79.370928|43.674625,-79.366979|43.675060,-79.364834|43.675681,-79.361658|43.674129,-79.361057|43.670093,-79.357710|43.668479,-79.357023|43.658110,-79.353933|43.653328,-79.348955|43.651031,-79.346981|43.645255,-79.359512|43.642460,-79.367494|43.638050,-79.379425|43.635379,-79.394874|43.634571,-79.395304|43.633950,-79.396763|43.635565,-79.398308|43.635938,-79.399338|43.636435,-79.399853|43.651093,-79.405689|43.665126,-79.411268";
var midtown_toronto = "43.715631,-79.446340|43.728707,-79.386649|43.727461,-79.382095|43.724793,-79.379510|43.711183,-79.377049|43.696058,-79.371141|43.695969,-79.369541|43.694723,-79.367695|43.693388,-79.363018|43.692676,-79.362034|43.691787,-79.361664|43.690630,-79.362034|43.689028,-79.363634|43.686002,-79.362403|43.684400,-79.363141|43.683421,-79.365111|43.681107,-79.368187|43.679860,-79.368557|43.678525,-79.367941|43.676300,-79.365234|43.674876,-79.364372|43.674698,-79.367080|43.671849,-79.370772|43.672561,-79.376310|43.661878,-79.425663|43.679950,-79.432186|43.679504,-79.436002|43.697304,-79.442648|43.698283,-79.439448|43.715542,-79.446217";



//communites
var high_park_swansea = "43.64788,-79.49201|43.64663,-79.49261|43.64514,-79.49252|43.64409,-79.49115|43.64227,-79.49029|43.64136,-79.48969|43.64154,-79.48789|43.64193,-79.48697|43.64216,-79.48617|43.64198,-79.4854|43.63937,-79.48523|43.63844,-79.48437|43.63807,-79.48276|43.63825,-79.48076|43.63831,-79.4793|43.63831,-79.47776|43.6375,-79.47707|43.63636,-79.47624|43.63533,-79.47613|43.63404,-79.47527|43.63324,-79.47396|43.63278,-79.47252|43.63216,-79.47158|43.63193,-79.47082|43.63235,-79.46952|43.63297,-79.46857|43.63357,-79.46841|43.63424,-79.4666|43.63446,-79.46566|43.63526,-79.46472|43.63551,-79.4632|43.63583,-79.46188|43.63632,-79.46128|43.63663,-79.46008|43.63651,-79.45827|43.63719,-79.45768|43.63704,-79.45599|43.63725,-79.45506|43.63707,-79.45415|43.63616,-79.44869|43.6362,-79.44755|43.63601,-79.4466|43.63837,-79.44643|43.6397,-79.44676|43.64262,-79.44788|43.64458,-79.44868|43.64654,-79.44959|43.64753,-79.44985|43.64865,-79.45028|43.64924,-79.45064|43.64971,-79.45064|43.65017,-79.45081|43.65123,-79.45149|43.6521,-79.45158|43.65316,-79.45192|43.65472,-79.45259|43.65579,-79.45261|43.65614,-79.45278";
var roncesvalles = "43.65635,-79.45244|43.65663,-79.45102|43.65666,-79.4495|43.65527,-79.4484|43.65251,-79.44583|43.6485,-79.44128|43.64698,-79.43841|43.64229,-79.42811|43.64015,-79.43885|43.63874,-79.44595|43.64755,-79.4495|43.65186,-79.45127|43.65395,-79.4519";
var south_parkdale = "43.6421,-79.42798|43.64142,-79.42643|43.64129,-79.42489|43.64073,-79.42291|43.64067,-79.42171|43.63794,-79.42042|43.63614,-79.41999|43.6357,-79.41965|43.63509,-79.42177|43.63452,-79.42437|43.63385,-79.42641|43.6334,-79.42883|43.63285,-79.42977|43.63123,-79.42961|43.62999,-79.42832|43.62986,-79.42909|43.63024,-79.43107|43.63061,-79.43253|43.63133,-79.43509|43.6321,-79.43656|43.63297,-79.43879|43.63386,-79.43953|43.63437,-79.44021|43.63487,-79.44149|43.63483,-79.44308|43.63531,-79.44475|43.63608,-79.44583|43.63619,-79.44629|43.6376,-79.44617|43.63859,-79.44617|43.63912,-79.44437";

var high_park_north = "43.66312,-79.45656|43.66149,-79.4637|43.66005,-79.47019|43.66236,-79.47144|43.66186,-79.47364|43.66099,-79.47576|43.66058,-79.47779|43.66038,-79.47906|43.65996,-79.48003|43.65098,-79.47596|43.6539,-79.46292|43.65675,-79.4495";
var junction_area = "43.67548,-79.47021|43.6734,-79.46857|43.67129,-79.4672|43.66853,-79.46589|43.6666,-79.465|43.66677,-79.46459|43.66685,-79.46364|43.66691,-79.46239|43.66657,-79.45999|43.6634,-79.45647|43.66071,-79.46963|43.66222,-79.47093|43.66012,-79.47969|43.66656,-79.4821|43.66925,-79.48226|43.66981,-79.48015|43.66989,-79.47881|43.67,-79.47909|43.6703,-79.47852|43.67299,-79.48018|43.67355,-79.48067|43.67386,-79.4804|43.67374,-79.47723|43.67439,-79.47499|43.67466,-79.47383|43.67495,-79.47305|43.67855,-79.47441|43.67866,-79.4737";
var dovercourt_wallace_emerson = "43.67009,-79.46098|43.67011,-79.46192|43.67099,-79.46201|43.66995,-79.45838|43.67046,-79.45521|43.67115,-79.45091|43.672,-79.44554|43.67394,-79.43705|43.67444,-79.434|43.67467,-79.43089|43.67501,-79.42539|43.67565,-79.42306|43.67244,-79.42169|43.66945,-79.42071|43.6636,-79.41832|43.6601,-79.43397|43.65681,-79.44951|43.66317,-79.45592|43.66645,-79.45867";
var weston_Pellam_park = "43.67855,-79.47338|43.67973,-79.46911|43.6805,-79.46587|43.68193,-79.46606|43.6828,-79.46205|43.67132,-79.45291|43.67061,-79.45563|43.67051,-79.45776|43.67068,-79.45942|43.67113,-79.46171|43.67048,-79.46229|43.66936,-79.46101|43.66762,-79.4596|43.66724,-79.4602|43.66753,-79.46192|43.66759,-79.46557";
var rockcliffe_smythe = "43.68395,-79.51072|43.68324,-79.5102|43.68218,-79.50887|43.68271,-79.50707|43.68181,-79.50613|43.68075,-79.50535|43.6797,-79.50535|43.67846,-79.50643|43.67666,-79.50844|43.67486,-79.51106|43.6743,-79.51209|43.67368,-79.51248|43.67245,-79.51267|43.67098,-79.51196|43.66955,-79.51168|43.66874,-79.51149|43.66672,-79.51282|43.66536,-79.51303|43.66321,-79.51261|43.66264,-79.51194|43.66389,-79.51088|43.66495,-79.50853|43.6674,-79.48237|43.67,-79.48175|43.67019,-79.47967|43.67381,-79.47887|43.6745,-79.47563|43.67646,-79.47346|43.67833,-79.47608|43.67899,-79.47383|43.68027,-79.47428|43.68379,-79.47986|43.68403,-79.48239|43.68404,-79.48431|43.68306,-79.48867|43.68218,-79.49303|43.681,-79.49758|43.68451,-79.4989|43.68423,-79.50005|43.68392,-79.50287|43.68448,-79.50461|43.6846,-79.50669|43.68435,-79.50881"; 

var lambton_baby_point = "43.66562,-79.49864|43.66545,-79.50409|43.66524,-79.5068|43.66497,-79.50837|43.66449,-79.50955|43.66266,-79.51222|43.6621,-79.51149|43.66194,-79.5107|43.66248,-79.50831|43.66298,-79.50664|43.6628,-79.50549|43.66194,-79.50426|43.66029,-79.50196|43.65933,-79.49962|43.65833,-79.49932|43.65726,-79.49984|43.65619,-79.50138|43.65513,-79.50258|43.65404,-79.50302|43.65306,-79.50265|43.65263,-79.50222|43.65196,-79.49915|43.65206,-79.49629|43.65229,-79.49414|43.65214,-79.49246|43.65165,-79.49134|43.65052,-79.49057|43.64922,-79.49126|43.6485,-79.49214|43.64789,-79.49019|43.64775,-79.48855|43.6479,-79.4861|43.64943,-79.48436|43.66039,-79.48892|43.6594,-79.49393|43.65935,-79.49477|43.65992,-79.49583|43.66108,-79.49762|43.66308,-79.4949|43.66313,-79.49483|43.66428,-79.49611|43.66469,-79.49676|43.66483,-79.49748";
var runnymede_blor_west_village = "43.66711,-79.48241|43.66634,-79.49157|43.6657,-79.49808|43.66511,-79.49675|43.66415,-79.49553|43.66321,-79.49525|43.66228,-79.49563|43.66101,-79.49754|43.65989,-79.49585|43.65935,-79.4937|43.65994,-79.49059|43.66023,-79.48922|43.64957,-79.48456|43.6492,-79.48437|43.65106,-79.47628|43.6591,-79.4795";
var corsa_italia_davenport = "43.68127,-79.46046|43.68446,-79.44561|43.67811,-79.44298|43.67936,-79.43607|43.67726,-79.43505|43.67433,-79.43375|43.67403,-79.43699|43.67275,-79.44246|43.67173,-79.44668|43.67107,-79.45101";
var caledonia_fairbank = "43.69248,-79.46398|43.69574,-79.45012|43.68448,-79.44574|43.68147,-79.45981|43.68399,-79.46188";
var keelesdale_eglinton_west = "43.69258,-79.46454|43.68762,-79.48642|43.68581,-79.48254|43.68524,-79.48166|43.68428,-79.48055|43.68355,-79.47921|43.68295,-79.47775|43.68097,-79.47532|43.67886,-79.47409|43.68082,-79.46566|43.6819,-79.46621|43.68324,-79.46139|43.68552,-79.46231|43.68884,-79.46345";



google.maps.Polygon.prototype.Contains = function (point) {
    var crossings = 0,
        path = this.getPath();

    // for each edge
    for (var i = 0; i < path.getLength(); i++) {
        var a = path.getAt(i),
            j = i + 1;
        if (j >= path.getLength()) {
            j = 0;
        }
        var b = path.getAt(j);
        if (rayCrossesSegment(point, a, b)) {
            crossings++;
        }
    }

    // odd number of crossings?
    return (crossings % 2 == 1);

    function rayCrossesSegment(point, a, b) {
        var px = point.lng(),
            py = point.lat(),
            ax = a.lng(),
            ay = a.lat(),
            bx = b.lng(),
            by = b.lat();
        if (ay > by) {
            ax = b.lng();
            ay = b.lat();
            bx = a.lng();
            by = a.lat();
        }
        // alter longitude to cater for 180 degree crossings
        if (px < 0) {
            px += 360;
        }
        if (ax < 0) {
            ax += 360;
        }
        if (bx < 0) {
            bx += 360;
        }

        if (py == ay || py == by) py += 0.00000001;
        if ((py > by || py < ay) || (px > Math.max(ax, bx))) return false;
        if (px < Math.min(ax, bx)) return true;

        var red = (ax != bx) ? ((by - ay) / (bx - ax)) : Infinity;
        var blue = (ax != px) ? ((py - ay) / (px - ax)) : Infinity;
        return (blue >= red);

    }

};





//show communities menu
var communites_menu = function( area ) {


    var communites = {
        'west-toronto'  : {
            'high_park_swansea'             : 'High Park Swansea',
            'roncesvalles'                  : 'Roncesvalles',
            'south_parkdale'                : 'South Parkdale',
            'high_park_north'               : 'High Park North',
            'junction_area'                 : 'Junction Area',
            'dovercourt_wallace_emerson'    : 'Dovercourt-Wallace Emerson',
            'weston_Pellam_park'            : 'Weston-Pellam Park',
            'rockcliffe_smythe'             : 'Rockcliffe-Smythe',
            'lambton_baby_point'            : 'Lambton Baby Point',
            'runnymede_blor_west_village'   : 'Runnymede-Blor West Village',
            'corsa_italia_davenport'        : 'Corsa ltalia Davenport',
            'caledonia_fairbank'            : 'Caledonia-Fairbank',
            'keelesdale_eglinton_west'      : 'Keelesdale-Eglinton West'

        }
    };


    var subs = '';
    jQuery.each( communites[area], function( index, value ){
        subs += '<label data-area="'+ area +'"><input type="radio" name="community" value="'+ index +'"> '+ value +'</label>';
    });
    

    if( subs != '' ) jQuery( '#map' ).append( '<div class="com_menu"><a href="#" data-area="'+ area +'">Reset</a><span>Communites</span>'+ subs +'</div>' );

}



//map communities handler
var map_communties = function( area ) {
    switch( area ){
        case 'west-toronto':
            communites_menu( area );
        break;
    }
}



//communities
var communities = function( com ) {

    var communities = {

        'west-toronto' : { 
            'high_park_swansea'             : high_park_swansea, 
            'roncesvalles'                  : roncesvalles, 
            'south_parkdale'                : south_parkdale,
            'high_park_north'               : high_park_north,
            'junction_area'                 : junction_area,
            'dovercourt_wallace_emerson'    : dovercourt_wallace_emerson,
            'weston_Pellam_park'            : weston_Pellam_park,
            'rockcliffe_smythe'             : rockcliffe_smythe,
            'lambton_baby_point'            : lambton_baby_point,
            'runnymede_blor_west_village'   : runnymede_blor_west_village,
            'corsa_italia_davenport'        : corsa_italia_davenport,
            'caledonia_fairbank'            : caledonia_fairbank,
            'keelesdale_eglinton_west'      : keelesdale_eglinton_west 
        }

    };

    return communities[com[0]][com[1]].split('|'); 

}




//boundaries
var boundaries = function( area ) {


    var bound_area = {
        'scarborough'       : scarborough,
        'north-york'        : north_york,
        'etobicoke'         : etobicoke,
        'east-toronto'      : east_toronto,
        'west-toronto'      : west_toronto,
        'downtown-toronto'  : downtown_toronto,
        'midtown-toronto'   : midtown_toronto
    };

        
    return bound_area[area].split('|');

 
}





var map_coordinates = function( area ) {

    switch( area instanceof Array ) {

        case true:  return communities( area );  break;
        default:  return boundaries( area );  break;

    }

}



//clear markers
var resetMarkers = function( boundaries ) {

    var bounds = new google.maps.LatLngBounds();

    for( var i = 0; i < markers.length; i++ ) {

        if( boundaries.Contains( markers[i].getPosition() ) != true ) {

            markers[i].setVisible(false);

        } else {
            
            markers[i].setVisible(true);
            bounds.extend( markers[i].getPosition() );

        }

    }

    map.fitBounds( bounds );
    map.setZoom( 14 );


}


//show community
var show_community = function() {

    polygon.setMap(null);
    resetMarkers( map_codes( map_coordinates( [jQuery(this).parent().attr('data-area'), this.value] ) ) );

    jQuery( '.com_menu label' ).removeClass('active');
    jQuery( this ).parent('label').addClass('active');
}



//reset map
var reset_community = function( e ) {

    e.preventDefault();
    polygon.setMap(null);
    resetMarkers( map_codes( map_coordinates( jQuery(this).attr('data-area') ) ) );
    map.setZoom( 13 );
    neutralizeCommunityOptions();

    jQuery( '.com_menu label' ).removeClass('active');

}





//unset options
var neutralizeCommunityOptions = function() {
    jQuery('.com_menu input').removeAttr('checked');
}






//codes
var map_codes = function( area ) {


    
    var dataCoords = [];
    var codes;

    
    if( area instanceof Array ) codes = area;
    else codes = map_coordinates( area, '' );    


    if( codes.length > 0 ) {

        
        for( i = 0; i < codes.length; i++ ) {

            var data = codes[i].split(',');
            dataCoords.push( {lat: parseFloat( data[0] ), lng: parseFloat( data[1] )} );
        }
        
        // Construct the polygon.
        polygon = new google.maps.Polygon({
          paths: dataCoords,
          strokeColor: '#FF0000',
          strokeOpacity: 0.8,
          strokeWeight: 2,
          fillColor: '#FF0000',
          fillOpacity: 0.35
        });


        polygon.setMap( map );

        return polygon;


        
    }

    

}




//format amount
var format = function( amount ){
    return amount.toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, '$1,');
}



//equalize the size of our map and sidebar, optional
var equalizer = function(){

	if( jQuery(window).width() <= 950 ) {

		if( jQuery( '.fsidebar' ).hasClass('relocated') !== true ) {

			var fsidebar = jQuery('.fsidebar').html();
			jQuery('.fsidebar').remove();
			jQuery('<div class="fsidebar relocated">'+fsidebar+'</div>').insertAfter('.fcontent');
		}

		if( jQuery(window).width() <= 950 ) jQuery('#map').css({ 'height' : '500px' });
		else if( jQuery(window).width() <= 400 ) jQuery('#map').css({ 'height' : '340px' });

	} else {

	    var sidebar = ( jQuery('.fsidebar').outerHeight() - 100 );
	    jQuery('#map').css( { 'height' : sidebar + 'px' } );

	}   

}



//waiting
var wait = function( o ){
    var map_loader = jQuery('.map');
    var el = "<span id='wait'></span>";

    //remove first
    jQuery('#wait').remove();

    if( o ){
        jQuery( map_loader ).append(el);
    } else {
        jQuery('#wait').fadeOut('fast', function(){
            jQuery(this).remove();
        });
    }
}


//clear the map markers
var clearMap = function(){
    for(i = 0; i < markers.length; i++){
        markers[i].setMap(null);
    }

    markers = [];
    markerCluster.clearMarkers();
}


var total_records = function( total ) {
    jQuery( '#total_record' ).text( total );
}


//populate map data
var load_map = function( area, PATH, data_lat, data_long, addr ){


    var valid_marker = 0;
    var address = new Array();
    address = addr.split('::');
  
    



    //initialize map
    var z = 4;

    map = new google.maps.Map(document.getElementById('map'), {
        zoom: z,
        center: new google.maps.LatLng( Number( data_lat ), Number( data_long ) ),
        mapTypeId: google.maps.MapTypeId.ROADMAP
    });

    var bounds = new google.maps.LatLngBounds();
    var infowindow = new google.maps.InfoWindow();




  	
    //create boundaries
    // Define the LatLng coordinates for the polygon's path.
    var dataCoords = [];
    var area_boundaries = map_codes( area );





    //populate markers
    var latitude = 0;
    var longitude = 0;
    var marker = '', i = 0;
    var a, b,type;
    var addrlatlong = new Array();


    for (i; i < address.length; i++) {
        
        a = address[i];
        b = new Array();
        b = a.split("|");
        var addr = b[0];
        var type = b[1];
        var lsid = b[2];
        var price = b[3];
        var protyp = b[4];
        var photo = b[5];



        //check if marker is in boundaries
        if( area_boundaries.Contains( new google.maps.LatLng(b[6], b[7]) ) == true ) {

            marker = new google.maps.Marker({
                position: new google.maps.LatLng(b[6], b[7]),
                map: map, 
                icon: {
                    url: PATH + '/images/' + type + ".png"
                }
            });

            markers.push(marker);

            bounds.extend(marker.position);

            google.maps.event.addListener(marker, 'click', (function(marker, i) {
                //var url = '<?php echo network_site_url('/');?>';
                var sContent =
                    '<h2 class="info-head"> $' + format( parseFloat(price) ) + '</h2>' +
                    '<p>' +
                    '<strong>' +addr+'</strong><br />' +
                    '' +protyp+'<br />' +
                    '<a class="button blue" href="/listings/'+area+'/'+lsid+'/">View Listing</a>'+ '<br /><br />' +
                    '<div id="focus" style="width:300px;height:250px;background-size:150%;background: url('+photo+') no-repeat center;"></div>'+'<br />' +
                    '</p>';
                    
                return function() {

                    infowindow.close();
                    infowindow.setContent(sContent);
                    infowindow.open(map, this);

                    map.setCenter( this.getPosition() );
                    map.setZoom(15);
                 
                }
            })(marker, i));

            
            map.fitBounds(bounds);


            valid_marker++;

        
        }    

       

        
        
    }//end of loop
    




    //update total valid markers
    total_records( valid_marker );




    var clusterStyles = [{

	    url: PATH + '/images/cluster.png',
	    height: 84,
	    width: 84,
	   
	    textColor: '#0055a5',
	    textSize: 16,
	   
	  },{
	    url: PATH + '/images/cluster.png',
	    height: 84,
	    width: 84,
	   
	    textColor: '#0055a5',
	    textSize: 16,
	  },{
	    url: PATH + '/images/cluster.png',
	    height: 84,
	    width: 84,
	   
	    textColor: '#0055a5',
	    textSize: 16,
	  }];


	markerCluster = new MarkerClusterer(map, markers, {
		styles: clusterStyles,
	    gridSize: 40,
	    maxZoom: 15,
	    minimumClusterSize: 1000
	});


    equalizer();


    //show communites if available
    map_communties( area );


}



//add on click event on the marker
var marker_infowindow = function( id ){
    google.maps.event.trigger(markers[id], 'click');
    return false;
}


var remove_marker = function( id ) {
    var mark = markers[id];
    mark.setMap( null );
}




//little listener
jQuery(document).ready(function(){
    jQuery( 'body' ).on( 'click', '.com_menu input', show_community );
    jQuery( 'body' ).on( 'click', '.com_menu a', reset_community );

    jQuery(window).on('resize', equalizer);
 
});